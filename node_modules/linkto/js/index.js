// Generated by CoffeeScript 1.9.3
(function() {
  var QS, URL, _;

  URL = require("url");

  QS = require("querystring");

  _ = require("lodash");

  module.exports = function(baseOpts) {
    if (baseOpts == null) {
      baseOpts = {};
    }
    return function(req, res, next) {
      var fullPath, hostname, hrefFull, proto, proxyBase;
      proto = req.protocol;
      hostname = req.headers.host;
      proxyBase = "";
      fullPath = req.originalUrl;
      if (req.app.get("trust proxy")) {
        hostname = req.headers["x-forwarded-host"] || req.headers.host;
        proxyBase = req.headers["x-forwarded-path"] || "";
        fullPath = proxyBase + fullPath;
      }
      hrefFull = proto + "://" + hostname + fullPath;
      req.linkto = req.linkTo = function(path, moreOpts) {
        var ix, opts, pathInsert, predicate, query, url;
        if (moreOpts == null) {
          moreOpts = {};
        }
        opts = _.assign({
          params: false,
          absolute: "proxy"
        }, baseOpts, moreOpts);
        if (path[0] === "/") {
          switch (opts.absolute) {
            case "host":
              pathInsert = "";
              break;
            case "proxy":
              pathInsert = proxyBase;
              break;
            case "route":
              pathInsert = proxyBase + req.baseUrl;
          }
          path = pathInsert + path;
        }
        if ((ix = path.indexOf("?")) !== -1) {
          query = QS.parse(path.substr(ix + 1));
          path = path.substr(0, ix);
        } else {
          query = {};
        }
        if (opts.params === true) {
          query = _.assign(_.clone(req.query), query);
        } else if (Array.isArray(opts.params)) {
          query = _.assign(_.pick(req.query, opts.params), query);
        } else if ("function" === typeof opts.params) {
          predicate = function(val, key) {
            return opts.params(key, val);
          };
          query = _.assign(_.pick(req.query, predicate), query);
        }
        url = URL.resolve(hrefFull, path);
        if (query = QS.encode(query)) {
          url += "?" + query;
        }
        return url;
      };
      return next();
    };
  };

}).call(this);
