// Generated by CoffeeScript 1.9.3
(function() {
  var QS, URL, express, handler, linkTo, should, supertest;

  URL = require("url");

  QS = require("querystring");

  should = require("should");

  supertest = require("supertest");

  express = require("express");

  linkTo = require("./");

  handler = function(req, res, next) {
    res.set("x-there", req.linkTo("there"));
    res.set("x-back", req.linkTo("../back"));
    res.set("x-base", req.linkTo("/base"));
    res.set("x-params", req.linkTo("params?a=A&b=B"));
    return res.redirect(303, req.linkto("quux"));
  };

  describe("default options", function() {
    var app;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo());
    app.get("/foo/bar/baz", handler);
    it("should redirect appropriately", function(done) {
      return supertest(app).get("/foo/bar/baz?one=1").set("host", "example.com").expect(303).expect("location", "http://example.com/foo/bar/quux").expect("x-there", "http://example.com/foo/bar/there").expect("x-back", "http://example.com/foo/back").expect("x-base", "http://example.com/base").expect("x-params", "http://example.com/foo/bar/params?a=A&b=B").end(done);
    });
    it("should honor reverse proxy headers", function(done) {
      return supertest(app).get("/foo/bar/baz").set("host", "example.com").set("X-Forwarded-Path", "/basepath").set("X-Forwarded-Proto", "https").expect(303).expect("x-base", "https://example.com/basepath/base").expect("location", "https://example.com/basepath/foo/bar/quux").end(done);
    });
    return it("should prefer X-Forwarded-Host to Host header", function(done) {
      return supertest(app).get("/foo/bar/baz").set("Host", "example.com").set("X-Forwarded-Host", "www.example.com").expect(303).expect("location", "http://www.example.com/foo/bar/quux").end(done);
    });
  });

  describe("no proxy options", function() {
    var app;
    app = express();
    app.set("trust proxy", false);
    app.use(linkTo());
    app.get("/foo/bar/baz", handler);
    return it("should ignore all X-Forwarded-* headers", function(done) {
      return supertest(app).get("/foo/bar/baz").set("host", "example.com").set("X-Forwarded-Host", "forward.example.com").set("X-Forwarded-Proto", "https").set("X-Forwarded-Path", "/all/your/base").expect(303).expect("location", "http://example.com/foo/bar/quux").expect("x-base", "http://example.com/base").end(done);
    });
  });

  describe("parameter preservation true", function() {
    var app;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo({
      params: true
    }));
    app.get("/foo/bar/baz", handler);
    it("should include ALL params for true", function(done) {
      return supertest(app).get("/foo/bar/baz?one=1").set("host", "example.com").expect(303).expect("location", "http://example.com/foo/bar/quux?one=1").end(done);
    });
    return it("should merge parameters, preferring new URL", function(done) {
      return supertest(app).get("/foo/bar/baz?a=Ape&c=Cheetah").set("host", "example.com").expect(303).end(function(err, res) {
        if (err) {
          return done(err);
        }
        URL.parse(res.headers['location'], true).query.should.eql({
          a: "Ape",
          c: "Cheetah"
        });
        URL.parse(res.headers['x-params'], true).query.should.eql({
          a: "A",
          b: "B",
          c: "Cheetah"
        });
        return done();
      });
    });
  });

  describe("selective parameter preservation", function() {
    var app;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo({
      params: ["c"]
    }));
    app.get("/foo/bar/baz", handler);
    it("should include ALL params for true", function(done) {
      return supertest(app).get("/foo/bar/baz?a=Ape&c=Cheetah").set("host", "example.com").expect(303).expect("location", "http://example.com/foo/bar/quux?c=Cheetah").end(done);
    });
    return it("should merge parameters, preferring new URL", function(done) {
      return supertest(app).get("/foo/bar/baz?a=Ape&c=Cheetah&d=Duck").set("host", "example.com").expect(303).end(function(err, res) {
        if (err) {
          return done(err);
        }
        URL.parse(res.headers['location'], true).query.should.eql({
          c: "Cheetah"
        });
        URL.parse(res.headers['x-params'], true).query.should.eql({
          a: "A",
          b: "B",
          c: "Cheetah"
        });
        return done();
      });
    });
  });

  describe("functional parameter preservation", function() {
    var app;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo({
      params: function(k, v) {
        return /^keep/.test(k);
      }
    }));
    app.get("/foo/bar/baz", handler);
    it("should include ALL params for true", function(done) {
      return supertest(app).get("/foo/bar/baz?a=Ape&keepC=Cheetah").set("host", "example.com").expect(303).expect("location", "http://example.com/foo/bar/quux?keepC=Cheetah").end(done);
    });
    return it("should merge parameters, preferring new URL", function(done) {
      return supertest(app).get("/foo/bar/baz?a=Ape&keepC=Cheetah&d=Duck").set("host", "example.com").expect(303).end(function(err, res) {
        if (err) {
          return done(err);
        }
        URL.parse(res.headers['location'], true).query.should.eql({
          keepC: "Cheetah"
        });
        URL.parse(res.headers['x-params'], true).query.should.eql({
          a: "A",
          b: "B",
          keepC: "Cheetah"
        });
        return done();
      });
    });
  });

  describe("express router usage", function() {
    var app, router;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo());
    app.use("/routebase", router = express.Router());
    router.get("/foo/bar", handler);
    it("should correctly insert from base url", function(done) {
      var base;
      base = "http://example.com/routebase";
      return supertest(app).get("/routebase/foo/bar").set("host", "example.com").expect(303).expect("location", base + "/foo/quux").end(function(err, res) {
        res.headers["x-there"].should.equal(base + "/foo/there");
        res.headers["x-back"].should.equal(base + "/back");
        res.headers["x-base"].should.equal("http://example.com/base");
        return done(err);
      });
    });
    return it("should correctly handle x-forwarded-path with router base", function(done) {
      var base;
      base = "http://example.com/nginx/frontend";
      return supertest(app).get("/routebase/foo/bar").set("host", "example.com").set("x-forwarded-path", "/nginx/frontend").expect(303).expect("location", base + "/routebase/foo/quux").expect("x-base", base + "/base").end(function(err, res) {
        res.headers["x-there"].should.equal(base + "/routebase/foo/there");
        res.headers["x-back"].should.equal(base + "/routebase/back");
        return done(err);
      });
    });
  });

  describe("absolute=host option", function() {
    var app, router;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo({
      absolute: "host"
    }));
    app.use("/routebase", router = express.Router());
    router.get("/foo/bar", handler);
    return it("should correctly handle x-forwarded-path with router base", function(done) {
      var base;
      base = "http://example.com";
      return supertest(app).get("/routebase/foo/bar").set("host", "example.com").set("x-forwarded-path", "/nginx/frontend").expect(303).expect("x-base", base + "/base").end(function(err, res) {
        return done(err);
      });
    });
  });

  describe("absolute=route option", function() {
    var app, router;
    app = express();
    app.set("trust proxy", true);
    app.use(linkTo({
      absolute: "route"
    }));
    app.use("/routebase", router = express.Router());
    router.get("/foo/bar", handler);
    return it("should correctly handle x-forwarded-path with router base", function(done) {
      var base;
      base = "http://example.com/nginx/frontend/routebase";
      return supertest(app).get("/routebase/foo/bar").set("host", "example.com").set("x-forwarded-path", "/nginx/frontend").expect(303).expect("x-base", base + "/base").end(function(err, res) {
        return done(err);
      });
    });
  });

}).call(this);
